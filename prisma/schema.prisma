generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  avatar    String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  createdProjects Project[] @relation("ProjectCreator")
  projectMembers  ProjectMember[]
  assignedIssues  Issue[]   @relation("IssueAssignee")
  createdIssues   Issue[]   @relation("IssueCreator")
  comments        Comment[]

  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  key         String   @unique
  description String?
  avatar      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creatorId String
  creator   User            @relation("ProjectCreator", fields: [creatorId], references: [id])
  members   ProjectMember[]
  issues    Issue[]

  @@map("projects")
}

model ProjectMember {
  id        String   @id @default(cuid())
  role      MemberRole @default(MEMBER)
  joinedAt  DateTime @default(now())

  // Relations
  userId    String
  projectId String
  user      User    @relation(fields: [userId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
  @@map("project_members")
}

model Issue {
  id          String      @id @default(cuid())
  title       String
  description String?
  type        IssueType   @default(TASK)
  status      IssueStatus @default(TODO)
  priority    Priority    @default(MEDIUM)
  estimate    Int?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  projectId String
  creatorId String
  assigneeId String?
  
  project   Project   @relation(fields: [projectId], references: [id])
  creator   User      @relation("IssueCreator", fields: [creatorId], references: [id])
  assignee  User?     @relation("IssueAssignee", fields: [assigneeId], references: [id])
  comments  Comment[]

  @@map("issues")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  issueId String
  userId  String
  issue   Issue  @relation(fields: [issueId], references: [id])
  user    User   @relation(fields: [userId], references: [id])

  @@map("comments")
}

enum Role {
  ADMIN
  USER
}

enum MemberRole {
  OWNER
  ADMIN
  MEMBER
}

enum IssueType {
  TASK
  BUG
  STORY
  EPIC
}

enum IssueStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
}

enum Priority {
  LOWEST
  LOW
  MEDIUM
  HIGH
  HIGHEST
}